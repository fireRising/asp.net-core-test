// <auto-generated />
using System;
using ClassifProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ClassifProject.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ClassifProject.Models.Classifiers", b =>
                {
                    b.Property<int>("id_class")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name_class");

                    b.HasKey("id_class");

                    b.ToTable("Classifiers");
                });

            modelBuilder.Entity("ClassifProject.Models.EducationLevel", b =>
                {
                    b.Property<int>("id_edulvl")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("code_edulvl");

                    b.Property<string>("name_edulvl");

                    b.HasKey("id_edulvl");

                    b.ToTable("EducationLevel");
                });

            modelBuilder.Entity("ClassifProject.Models.EnlargedGroups", b =>
                {
                    b.Property<int>("id_engr")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("code_engr");

                    b.Property<int>("id_class");

                    b.Property<string>("name_engr");

                    b.HasKey("id_engr");

                    b.HasIndex("id_class");

                    b.ToTable("EnlargedGroups");
                });

            modelBuilder.Entity("ClassifProject.Models.Specialties", b =>
                {
                    b.Property<int>("id_spec")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("code_spec");

                    b.Property<int>("id_class");

                    b.Property<int>("id_edulvl");

                    b.Property<int>("id_engr");

                    b.Property<string>("name_spec");

                    b.HasKey("id_spec");

                    b.HasIndex("id_class");

                    b.HasIndex("id_edulvl");

                    b.HasIndex("id_engr");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("ClassifProject.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("ClassifProject.Models.Transcoding", b =>
                {
                    b.Property<int>("id_trans")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("id_class_1");

                    b.Property<int>("id_class_2");

                    b.Property<int>("id_spec_1");

                    b.Property<int>("id_spec_2");

                    b.HasKey("id_trans");

                    b.HasIndex("id_class_1");

                    b.HasIndex("id_class_2");

                    b.HasIndex("id_spec_1");

                    b.HasIndex("id_spec_2");

                    b.ToTable("Transcoding");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ClassifProject.Models.EnlargedGroups", b =>
                {
                    b.HasOne("ClassifProject.Models.Classifiers", "Classifiers")
                        .WithMany()
                        .HasForeignKey("id_class")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClassifProject.Models.Specialties", b =>
                {
                    b.HasOne("ClassifProject.Models.Classifiers", "Classifiers")
                        .WithMany()
                        .HasForeignKey("id_class")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClassifProject.Models.EducationLevel", "EducationLevel")
                        .WithMany()
                        .HasForeignKey("id_edulvl")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClassifProject.Models.EnlargedGroups", "EnlargedGroups")
                        .WithMany()
                        .HasForeignKey("id_engr")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClassifProject.Models.Transcoding", b =>
                {
                    b.HasOne("ClassifProject.Models.Classifiers", "Classifiers_1")
                        .WithMany()
                        .HasForeignKey("id_class_1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClassifProject.Models.Classifiers", "Classifiers_2")
                        .WithMany()
                        .HasForeignKey("id_class_2")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClassifProject.Models.Specialties", "Specialties_1")
                        .WithMany()
                        .HasForeignKey("id_spec_1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClassifProject.Models.Specialties", "Specialties_2")
                        .WithMany()
                        .HasForeignKey("id_spec_2")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
